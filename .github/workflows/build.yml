name: Build

on:
  workflow_call:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check-build-exists:
    name: Checking if build exists
    runs-on: ubuntu-latest
    outputs:
      exists: ${{ steps.check-build-exists.outputs.exists }}

    steps:
      - name: Set version number
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: cocobay-app
          tags: |
            type=sha,prefix=,format=long

      - name: Check if already built
        id: "check-build-exists"
        run: |
          echo "Checking if version ${{ steps.meta.outputs.version }} exists"
          (curl -u "${{ secrets.DOCKER_REGISTRY_USERNAME }}:${{ secrets.DOCKER_REGISTRY_PASSWORD }}" \
            "https://${{ vars.DOCKER_REGISTRY }}/v2/cocobay-app-backend/tags/list" | \
            grep -q "\"${{ steps.meta.outputs.version }}\"" && \
            echo "Build ${{ steps.meta.outputs.version }} already exists in registry, no need to rebuild" && \
            echo "::set-output name=exists::true"
          ) || \
          echo "Build ${{ steps.meta.outputs.version }} does not exist yet"

  setup:
    name: Install and cache
    if: ${{ needs.check-build-exists.outputs.exists != 'true' }}
    runs-on: ubuntu-latest
    needs: check-build-exists
    outputs:
      version: ${{ steps.meta.outputs.version }}

    steps:
      - name: Checkout branch
        uses: actions/checkout@v4

      - name: Set version number
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: cocobay-app
          tags: |
            type=sha,prefix=,format=long

      - name: Yarn Install
        uses: ./.github/workflows/actions/yarn-cache

  lint-check:
    name: Lint check
    if: ${{ needs.check-build-exists.outputs.exists != 'true' }}
    runs-on: ubuntu-latest
    needs:
      - check-build-exists
      - setup

    steps:
      - name: Checkout branch
        uses: actions/checkout@v4

      - name: Yarn Install
        uses: ./.github/workflows/actions/yarn-cache

      - name: Lint checks
        run: |
          yarn lint:check

      - name: Cancel workflow if failed
        if: failure()
        uses: andymckay/cancel-action@0.4

  test-unit:
    name: Unit tests
    if: ${{ needs.check-build-exists.outputs.exists != 'true' }}
    runs-on: ubuntu-latest
    needs:
      - check-build-exists
      - setup

    steps:
      - name: Checkout branch
        uses: actions/checkout@v4

      - name: Yarn Install
        uses: ./.github/workflows/actions/yarn-cache

      - name: Run all unit tests
        run: |
          yarn test

      - name: Cancel workflow if failed
        if: failure()
        uses: andymckay/cancel-action@0.4

  test-e2e:
    name: End to end tests
    if: ${{ needs.check-build-exists.outputs.exists != 'true' }}
    runs-on: ubuntu-latest
    needs:
      - check-build-exists
      - setup

    steps:
      - name: Checkout branch
        uses: actions/checkout@v4

      - name: Yarn Install
        uses: ./.github/workflows/actions/yarn-cache

      - name: Run all e2e tests
        run: |
          yarn test:e2e

      - name: Cancel workflow if failed
        if: failure()
        uses: andymckay/cancel-action@0.4

  build:
    name: Build all
    if: ${{ needs.check-build-exists.outputs.exists != 'true' }}
    runs-on: ubuntu-latest
    needs:
      - check-build-exists
      - setup

    steps:
      - name: Checkout branch
        uses: actions/checkout@v4

      - name: Build Backend docker image
        run: |
          docker build . --file Dockerfile.backend --target backend \
            -t ${{ vars.DOCKER_REGISTRY }}/cocobay-app-backend:${{ needs.setup.outputs.version }} --pull=true

      - name: Smoke test Backend
        run: |
          docker run -d --env PORT=80 -p 80 --name cocobay-app-backend ${{ vars.DOCKER_REGISTRY }}/cocobay-app-backend:${{ needs.setup.outputs.version }}
          docker run --network container:cocobay-app-backend appropriate/curl --retry 5 --retry-connrefused http://localhost

      - name: Build Frontend docker image
        run: |
          docker build . --file Dockerfile.frontend --target frontend \
            -t ${{ vars.DOCKER_REGISTRY }}/cocobay-app-frontend:${{ needs.setup.outputs.version }} --pull=true

      - name: Smoke test Frontend
        run: |
          docker run -d -p 80 --name cocobay-app-frontend ${{ vars.DOCKER_REGISTRY }}/cocobay-app-frontend:${{ needs.setup.outputs.version }}
          docker run --network container:cocobay-app-frontend appropriate/curl --retry 5 --retry-connrefused http://localhost

      # - name: Tear down smoke test containers (only needed in persistent self-hosted runners, since Github hosted are ephemeral)
      #   if: always()
      #   run: |
      #     docker kill $(docker ps -a -q) 2>&1 >/dev/null || echo "INFO: Unable to kill some containers"
      #     docker rm $(docker ps -a -q) 2>&1 >/dev/null || echo "INFO: Unable to remove some containers"

      - name: Login to docker registry
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_REGISTRY_USERNAME }}
          password: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}

      - name: Push images to repository
        run: |
          docker_images=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep '${{ vars.DOCKER_REGISTRY }}/cocobay-app')

          for image in $docker_images; do
            echo "Pushing image $image"
            docker push $image
          done
