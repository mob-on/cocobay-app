name: Stage deployment

on:
  push:
    branches: [develop]
    paths:
      - Dockerfile*
      - .dockerignore
      - package.json
      - tsconfig.json
      - yarn.lock
      - .yarnrc.yml
      - "packages/**"
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

jobs:
  check-build-exists:
    name: Skip build if exists
    runs-on: ubuntu-latest
    outputs:
      exists: ${{ steps.check-build-exists.outputs.exists }}
      version: ${{ steps.check-build-exists.outputs.version }}
    steps:
      - uses: ./.github/workflows/actions/check-build-exists
        id: check-build-exists
        with:
          docker_registry: ${{ vars.DOCKER_REGISTRY }}
          docker_registry_username: ${{ secrets.DOCKER_REGISTRY_USERNAME }}
          docker_registry_password: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}

  test:
    name: Test
    if: ${{ needs.check-build-exists.outputs.exists != 'true' }}
    needs:
      - check-build-exists
    uses: ./.github/workflows/test.yml
    secrets: inherit

  build-base:
    name: Base
    if: ${{ needs.check-build-exists.outputs.exists != 'true' }}
    needs:
      - check-build-exists
    uses: ./.github/workflows/base.yml
    secrets: inherit
    with:
      version: ${{ needs.check-build-exists.outputs.version }}

  build:
    name: Build
    if: ${{ needs.check-build-exists.outputs.exists != 'true' }}
    uses: ./.github/workflows/build.yml
    secrets: inherit
    needs:
      - build-base
      - check-build-exists
    with:
      env: stage
      version: ${{ needs.check-build-exists.outputs.version }}

  deployment:
    name: Deploy to staging
    environment: staging
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Checkout branch
        id: git-checkout
        uses: actions/checkout@main
        with:
          ref: ${{ github.event.inputs.branch || github.ref }}

      - name: Login to docker registry
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_REGISTRY_USERNAME }}
          password: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}

      - name: Tag Front End build for staging release
        run: |
          docker pull ${{ vars.DOCKER_REGISTRY }}/cocobay-app-frontend:${{ steps.git-checkout.outputs.commit }}
          docker tag ${{ vars.DOCKER_REGISTRY }}/cocobay-app-frontend:${{ steps.git-checkout.outputs.commit }} \
            ${{ vars.DOCKER_REGISTRY }}/cocobay-app-frontend:staging
          docker push ${{ vars.DOCKER_REGISTRY }}/cocobay-app-frontend:staging

      - name: Tag Back End build for staging release
        run: |
          docker pull ${{ vars.DOCKER_REGISTRY }}/cocobay-app-backend:${{ steps.git-checkout.outputs.commit }}
          docker tag ${{ vars.DOCKER_REGISTRY }}/cocobay-app-backend:${{ steps.git-checkout.outputs.commit }} \
            ${{ vars.DOCKER_REGISTRY }}/cocobay-app-backend:staging
          docker push ${{ vars.DOCKER_REGISTRY }}/cocobay-app-backend:staging

      - name: Trigger Jenkins release job
        run: |
          CRUMB=$(curl --fail -c cookies.txt -u "${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_PASSWORD }}" \
            "${{ secrets.JENKINS_URL }}/crumbIssuer/api/json" | jq --raw-output '.crumb')
          curl -X POST -b cookies.txt -H "Jenkins-Crumb: $CRUMB" --fail -u "${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_PASSWORD }}" \
            "${{ secrets.JENKINS_URL }}/job/Cocobay%20App%20Deploy%20Staging/build?delay=0sec" \
            --data-urlencode "name=branch" \
            --data-urlencode "value=${{ github.ref }}" \
            --data-urlencode "statusCode=303" \
            --data-urlencode "redirectTo=.:" \
            --data-urlencode "Jenkins-Crumb=$CRUMB" \
            --data-urlencode "json={\"parameter\":{\"name\":\"branch\",\"value\":\"${{ github.ref }}\"},\"statusCode\":\"303\",\"redirectTo\":\".\",\"\":\"\",\"Jenkins-Crumb\":\"$CRUMB\"}"
